{
  
    
        "post0": {
            "title": "Title",
            "content": "Montgomery CO. Covid-19 Status. . This notebook extracts data from the Montgomery Co. Texas health department web site: https://mcphd-tx.org/coronavirus-covid-19/confirmed-cases/ and creates several plots to visualize the data. . # Import needed modules from IPython.display import Markdown as md import pandas as pd import datetime,re from scipy import stats from numpy import * from matplotlib.pyplot import * from pandas.plotting import register_matplotlib_converters register_matplotlib_converters() . url1=&#39;https://mcphd-tx.org/coronavirus-covid-19/confirmed-cases/&#39; dat_a=pd.read_html(url1)[0] dat_b=pd.read_html(url1)[1] dat_b.columns=dat_a.columns dat=dat_a.append(dat_b) clms=list(dat.columns) clms[0]=&#39;N&#39; dat.columns=clms dat.DATE=pd.to_datetime(dat.DATE) dat[&#39;days&#39;]=(dat.DATE-dat.DATE.iloc[0]).dt.days agg_fnc={&#39;N&#39;:&#39;count&#39;,&#39;days&#39;:&#39;first&#39;} # dat1=dat.groupby(by=&#39;DATE&#39;).agg(agg_fnc) dat1[&#39;cases&#39;]=dat1.N.cumsum() pcti=dat1.cases[1:].pct_change().mean() # dbltm=log(2)/log(1+pcti) # dat.loc[dat.STATUS==&#39;Under investigation&#39;,&#39;STATUS&#39;]=&#39;Under Investigation&#39; # D=dat[dat.STATUS==&#39;Deceased&#39;].groupby(by=&#39;DATE&#39;).agg(agg_fnc) D.columns=[&#39;D&#39;,&#39;days&#39;] # Rec=dat[dat.STATUS==&#39;Recovered&#39;].groupby(by=&#39;DATE&#39;).agg(agg_fnc) Rec.columns=[&#39;R&#39;,&#39;days&#39;] # AH=dat[dat.STATUS==&#39;At Home&#39;].groupby(by=&#39;DATE&#39;).agg(agg_fnc) AH.columns=[&#39;H&#39;,&#39;days&#39;] # AHR=dat[dat.STATUS==&#39;At Home (released from hospital)&#39;].groupby(by=&#39;DATE&#39;).agg(agg_fnc) AHR.columns=[&#39;HR&#39;,&#39;days&#39;] # UI=dat[dat.STATUS==&#39;Under Investigation&#39;].groupby(by=&#39;DATE&#39;).agg(agg_fnc) UI.columns=[&#39;UI&#39;,&#39;days&#39;] dat2=dat1.merge(D.D,how=&#39;left&#39;,left_on=&#39;DATE&#39;,right_on=&#39;DATE&#39;) dat2.loc[pd.isnull(dat2.D),&#39;D&#39;]=0 dat2=dat2.merge(Rec.R,how=&#39;left&#39;,left_on=&#39;DATE&#39;,right_on=&#39;DATE&#39;) dat2.loc[pd.isnull(dat2.R),&#39;R&#39;]=0 dat2=dat2.merge(AH.H,how=&#39;left&#39;,left_on=&#39;DATE&#39;,right_on=&#39;DATE&#39;) dat2.loc[pd.isnull(dat2.H),&#39;H&#39;]=0 dat2=dat2.merge(AHR.HR,how=&#39;left&#39;,left_on=&#39;DATE&#39;,right_on=&#39;DATE&#39;) dat2.loc[pd.isnull(dat2.HR),&#39;HR&#39;]=0 dat2=dat2.merge(UI.UI,how=&#39;left&#39;,left_on=&#39;DATE&#39;,right_on=&#39;DATE&#39;) dat2.loc[pd.isnull(dat2.UI),&#39;UI&#39;]=0 dat2[&#39;A&#39;]=dat2.H+dat2.HR+dat2.UI dat2[&#39;INAC&#39;]=dat2.D+dat2.R # dat2[&#39;active&#39;]=dat2.A.cumsum() dat2[&#39;deceased&#39;]=dat2.D.cumsum() dat2[&#39;hospitalized&#39;]=dat2.H.cumsum() dat2[&#39;recovered&#39;]=dat2.R.cumsum() dat2[&#39;ui&#39;]=dat2.UI.cumsum() # dat2[&#39;pcti&#39;]=dat2.cases[1:].pct_change() dat2[&#39;pcti_ma5&#39;]=dat2.pcti.rolling(window=5).mean() dat2[&#39;dbltm_ma5&#39;]=log(2)/log(1+dat2.pcti_ma5) inc_today=dat2.N.iloc[-1] lastD=dat2.index[-1] dths=dat2.deceased.iloc[-1] # # Write statistics as markdown md((&#39;### Montgomery Co. TX Statistics for {}: ### n&amp;nbsp;&amp;nbsp; Total Cases: {}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Active Cases: {}&#39;+ &#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Daily Increase: {}&#39;+ &#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Case doubling time (days): {:.2f} n n&#39;+ &#39;&amp;nbsp;&amp;nbsp; Recovered: {}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Hospitalized {}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Deaths: {}&#39;+ &#39;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Under Investigation {}&#39;).format( dat2.index[-1].strftime(&#39;%m/%d/%Y&#39;),dat2.cases.iloc[-1],dat2.active.iloc[-1],dat2.N.iloc[-1],dat2.dbltm_ma5.iloc[-1], dat2.recovered.iloc[-1],dat2.hospitalized.iloc[-1],dat2.deceased.iloc[-1],dat2.ui.iloc[-1])) . Montgomery Co. TX Statistics for 04/17/2020: . &nbsp;&nbsp; Total Cases: 370&nbsp;&nbsp;&nbsp;&nbsp; Active Cases: 217.0&nbsp;&nbsp;&nbsp;&nbsp; Daily Increase: 20&nbsp;&nbsp;&nbsp;&nbsp; Case doubling time (days): 8.86 . &nbsp;&nbsp; Recovered: 100.0&nbsp;&nbsp;&nbsp;&nbsp; Hospitalized 149.0&nbsp;&nbsp;&nbsp;&nbsp; Deaths: 7.0&nbsp;&nbsp;&nbsp;&nbsp; Under Investigation 57.0 . # plot daily increase figure(figsize=[8,6]) bar(dat2.index,dat2.N,color=&#39;red&#39;) grid(&#39;both&#39;) t=title(&#39;Covid-19 Cases - Daily Increase %s nMontgomery Co. TX &#39; % (dat2.index[-1].strftime(&#39;%m/%d/%Y&#39;))) . figure(figsize=[8,6]) plot(dat2.index,dat2.cases,color=&#39;black&#39;,marker=&#39;*&#39;,linestyle=&#39;-&#39;,label=&#39;Total Confirmed&#39;) plot(dat2.index,dat2.deceased,color=&#39;blue&#39;,marker=&#39;*&#39;,linestyle=&#39;-&#39;,label=&#39;Deceased&#39;) plot(dat2.index,dat2.active,color=&#39;orange&#39;,marker=&#39;*&#39;,linestyle=&#39;-&#39;,label=&#39;Active&#39;) plot(dat2.index,dat2.recovered,color=&#39;green&#39;,marker=&#39;*&#39;,linestyle=&#39;-&#39;,label=&#39;Recovered&#39;) plot(dat2.index,dat2.hospitalized,color=&#39;red&#39;,marker=&#39;*&#39;,linestyle=&#39;-&#39;,label=&#39;Hospitalized&#39;) grid(&#39;both&#39;) legend() t=title(&#39;Covid-19 Cases %s nMontgomery Co. TX&#39; % (dat2.index[-1].strftime(&#39;%m/%d/%Y&#39;))) . figure(figsize=[10,6]) plot(dat2.index,dat2.dbltm_ma5) grid(&#39;both&#39;) ylabel(&#39;Time to Double (days)&#39;) t=title(&#39;Covid-19 Time to Double Number of Cases (5day moving average) %s nMontgomery Co. TX&#39; % (dat2.index[-1].strftime(&#39;%m/%d/%Y&#39;))) .",
            "url": "https://klago1.github.io/WaveField/2020/04/17/MontCoTxCovid.html",
            "relUrl": "/2020/04/17/MontCoTxCovid.html",
            "date": " • Apr 17, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://klago1.github.io/WaveField/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://klago1.github.io/WaveField/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://klago1.github.io/WaveField/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://klago1.github.io/WaveField/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}